import axios, { AxiosResponse } from 'axios';
import Head from 'next/head';
import NextLink from 'next/link';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import {
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Box,
  Button,
  Container,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Input,
  List,
  Stack,
  Text,
  Textarea,
  useDisclosure,
  CloseButton,
  ListItem,
  Heading,
} from '@chakra-ui/react';
import { Footer } from '../components/Footer';
import { Nav } from '../components/Navbar';
import { Section } from '../components/Section';

type FormDataType = {
  name: string;
  email: string;
  text: string;
};

export default function Home() {
  const [isLoading, setIsLoading] = useState(false);
  const { isOpen, onOpen, onClose } = useDisclosure({});
  const {
    handleSubmit,
    register,
    reset,
    formState: { errors },
  } = useForm<FormDataType>({ mode: 'onChange' });

  async function onSubmit(payload: FormDataType) {
    try {
      setIsLoading(true);
      await axios.post('/api/email', payload);
      onOpen();
      reset();
    } catch (error) {
    } finally {
      setIsLoading(false);
    }
  }
  return (
    <Box>
      <Nav></Nav>
      <Container maxW='container.lg' mb={10}>
        <Head>
          <title>Create Next App</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>
        <List mt={4} px={2} spacing={16}>
          <Section id='about' title='概要'>
            <Text>
              Lorem ipsum dolor, sit amet consectetur adipisicing elit. Iure in
              sapiente ex laudantium! Officiis saepe optio officia magnam,
              praesentium similique maiores animi sapiente labore in unde
              doloremque fuga cumque ullam!
            </Text>
          </Section>
          <Section id='company' title='会社情報'>
            <Stack justifyContent='space-between' textAlign='center'>
              <Box>
                <Text>会社名:Company</Text>
              </Box>
              <Box>
                <Text>住所:Address</Text>
              </Box>
              <Box>
                <Text>
                  電話番号:
                  <NextLink href='tel:080-xxxx-xxxx'>
                    <Box as='span' color='blue.600'>
                      080-xxxx-xxxx
                    </Box>
                  </NextLink>
                </Text>
              </Box>
            </Stack>
          </Section>
          <Section id='contact' title='フォーム'>
            <Text mb={5}>
              ご不明点等ございましたら以下のフォームまたは
              <Text color='blue.600' as='span'>
                <NextLink href={`mailto:sample@sample.com`}>
                  こちらのメール
                </NextLink>
                (sample@sample.com)
              </Text>
              にてお気軽にご連絡ください。
            </Text>
            <form onSubmit={handleSubmit(onSubmit)}>
              {isOpen && (
                <Alert status='success'>
                  <AlertIcon />
                  <AlertDescription>正常に送信されました</AlertDescription>
                  <CloseButton
                    ml='auto'
                    right={-1}
                    top={-1}
                    onClick={onClose}
                  />
                </Alert>
              )}
              <FormControl isInvalid={errors.name && true}>
                <FormLabel htmlFor='name'>お名前</FormLabel>
                <Input
                  id='name'
                  placeholder='田中太郎'
                  {...register('name', { required: '必須項目です' })}
                />
                <FormErrorMessage>
                  {errors.name && (errors.name.message as string)}
                </FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={errors.email && true}>
                <FormLabel htmlFor='email'>メールアドレス</FormLabel>
                <Input
                  id='email'
                  placeholder='email@sample.com'
                  type='email'
                  {...register('email', {
                    required: '必須項目です',
                    pattern: {
                      value:
                        /^[a-zA-Z0-9_+-]+(.[a-zA-Z0-9_+-]+)*@([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*.)+[a-zA-Z]{2,}$/,
                      message: '書式が正しくありません',
                    },
                  })}
                />
                <FormErrorMessage>
                  {errors.email && (errors.email.message as string)}
                </FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={errors.text && true}>
                <FormLabel htmlFor='text'>お問い合わせ内容</FormLabel>
                <Textarea
                  id='text'
                  placeholder='ご不明な点等をご記入ください。'
                  resize='none'
                  {...register('text', { required: '必須項目です' })}
                />
                <FormErrorMessage>
                  {errors.text && (errors.text.message as string)}
                </FormErrorMessage>
              </FormControl>
              <Stack textAlign='center' mt={5}>
                <Button type='submit' w='70%' mx='auto' bgColor='blue.300'>
                  {isLoading ? '送信中です・・・' : '送信する'}
                </Button>
              </Stack>
            </form>
          </Section>
        </List>
      </Container>
      <Footer />
    </Box>
  );
}
