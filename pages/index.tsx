import axios from 'axios';
import Head from 'next/head';
import NextLink from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import {
  Alert,
  AlertIcon,
  AlertDescription,
  Box,
  Button,
  CloseButton,
  Container,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Input,
  Image,
  List,
  SimpleGrid,
  Stack,
  Text,
  Textarea,
  useDisclosure,
} from '@chakra-ui/react';
import { Footer } from '../components/Footer';
import { Nav } from '../components/Navbar';
import { Section } from '../components/Section';
import { Welcome } from '../components/Welcome';

type FormDataType = {
  name: string;
  email: string;
  text: string;
};

export default function Home() {
  const router = useRouter();
  const [isReady, setIsReady] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { isOpen, onOpen, onClose } = useDisclosure({});
  const {
    handleSubmit,
    register,
    reset,
    formState: { errors },
  } = useForm<FormDataType>({ mode: 'onChange' });

  useEffect(() => {
    setIsReady(router.isReady);
  }, [router]);

  async function onSubmit(payload: FormDataType) {
    try {
      setIsLoading(true);
      await axios.post('/api/email', payload);
      onOpen();
      reset();
    } catch (error) {
    } finally {
      setIsLoading(false);
    }
  }
  return (
    <>
      {isReady && (
        <Box
          pos='relative'
          _before={{
            base: { content: '""' },
            md: {
              content: '""',
              pos: 'absolute',
              width: 0.5,
              left: '1.5%',
              height: '100%',
              background: 'green',
            },
          }}
        >
          <Head>
            <title>Create Next App</title>
            <meta name='description' content='Generated by create next app' />
            <link rel='icon' href='/favicon.ico' />
          </Head>
          <Nav></Nav>
          <Container maxW='container.lg' mb={10}>
            <Welcome />
            <List mt={16} px={2} spacing={16}>
              <Section id='about' title='概要'>
                <Text fontSize={20}>
                  Lorem ipsum dolor, sit amet consectetur adipisicing elit. Iure
                  in sapiente ex laudantium! Officiis saepe optio officia
                  magnam, praesentium similique maiores animi sapiente labore in
                  unde doloremque fuga cumque ullam!
                </Text>
              </Section>
              <Section id='company' title='会社情報'>
                <SimpleGrid columns={2} spacing={2}>
                  <Stack justifyContent='center' spacing={4}>
                    <Text fontSize={24}>
                      会社名:
                      <Text ml={1}>Company</Text>
                    </Text>
                    <Text fontSize={24}>
                      住所:
                      <Text ml={1}>Address</Text>
                    </Text>
                    <Text fontSize={24}>
                      電話番号:
                      <Text ml={1} color='blue.600'>
                        <NextLink href='tel:080-xxxx-xxxx'>
                          080-xxxx-xxxx
                        </NextLink>
                      </Text>
                    </Text>
                  </Stack>
                  <Image my='auto' src='/company4.avif' alt='company4' />
                </SimpleGrid>
              </Section>
              <Section id='contact' title='フォーム'>
                <Text mb={5}>
                  ご不明点等ございましたら以下のフォームまたは
                  <Text color='blue.600' as='span'>
                    <NextLink href='mailto:sample@sample.com'>
                      こちらのメール (sample@sample.com)
                    </NextLink>
                  </Text>
                  にてお気軽にご連絡ください。
                </Text>
                <form onSubmit={handleSubmit(onSubmit)}>
                  {isOpen && (
                    <Alert status='success'>
                      <AlertIcon />
                      <AlertDescription>正常に送信されました</AlertDescription>
                      <CloseButton
                        ml='auto'
                        right={-1}
                        top={-1}
                        onClick={onClose}
                      />
                    </Alert>
                  )}
                  <FormControl isInvalid={errors.name && true}>
                    <FormLabel htmlFor='name'>お名前</FormLabel>
                    <Input
                      id='name'
                      placeholder='田中太郎'
                      {...register('name', { required: '必須項目です' })}
                    />
                    <FormErrorMessage>
                      {errors.name && (errors.name.message as string)}
                    </FormErrorMessage>
                  </FormControl>
                  <FormControl isInvalid={errors.email && true}>
                    <FormLabel htmlFor='email'>メールアドレス</FormLabel>
                    <Input
                      id='email'
                      placeholder='email@sample.com'
                      type='email'
                      {...register('email', {
                        required: '必須項目です',
                        pattern: {
                          value:
                            /^[a-zA-Z0-9_+-]+(.[a-zA-Z0-9_+-]+)*@([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*.)+[a-zA-Z]{2,}$/,
                          message: '書式が正しくありません',
                        },
                      })}
                    />
                    <FormErrorMessage>
                      {errors.email && (errors.email.message as string)}
                    </FormErrorMessage>
                  </FormControl>
                  <FormControl isInvalid={errors.text && true}>
                    <FormLabel htmlFor='text'>お問い合わせ内容</FormLabel>
                    <Textarea
                      id='text'
                      placeholder='ご不明な点等をご記入ください。'
                      resize='none'
                      {...register('text', { required: '必須項目です' })}
                    />
                    <FormErrorMessage>
                      {errors.text && (errors.text.message as string)}
                    </FormErrorMessage>
                  </FormControl>
                  <Stack textAlign='center' mt={5}>
                    <Button type='submit' w='70%' mx='auto' bgColor='blue.300'>
                      {isLoading ? '送信中です・・・' : '送信する'}
                    </Button>
                  </Stack>
                </form>
              </Section>
            </List>
          </Container>
          <Footer />
        </Box>
      )}
    </>
  );
}
